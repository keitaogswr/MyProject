/*******************************************************************************
* タイトル名：
* ファイル名：camera.h
* 作成者	：AT13B284 10 小笠原啓太
* 作成日	：
********************************************************************************
* 更新履歴	：
*
*******************************************************************************/
/*******************************************************************************
* インクルードガード
*******************************************************************************/
#ifndef _CAMERA_H_
#define _CAMERA_H_

/*******************************************************************************
* インクルードファイル
*******************************************************************************/

/*******************************************************************************
* マクロ定義
*******************************************************************************/

/*******************************************************************************
* 構造体
*******************************************************************************/
typedef enum
{
	CAMERAMODE_SNEAK,
	CAMERAMODE_ROCKON,
	CAMERAMODE_MAX
}CAMERAMODE;

/*******************************************************************************
* 前方宣言
*******************************************************************************/

/*******************************************************************************
* クラス宣言
*******************************************************************************/
// カメラクラス
class CCamera
{
	protected:
		Vector3 m_Pos;					// 視点位置
		Vector3 m_PosR;					// 注視点の位置
		Vector3 m_VecU;					// 上方向ベクトル
		Vector3 m_MoveV;				// 視点移動距離
		Vector3 m_MoveR;				// 注視点移動距離
		D3DXMATRIX	m_MtxProjection;	// プロジェクションマトリックス
		D3DXMATRIX	m_MtxView;			// ビューマトリックス
		
		Vector3 m_Rad;					// 角度差分
		Vector3 m_RotN;					// 次の向き

		bool m_bShake;					// 画面を揺らすかどうか
		int m_nCnt;						// 振動カウンタ
		float m_fAmplitude;				// 振動幅
		int m_nShakeTime;				// 振動時間
		int m_nMode;					// カメラのモード

		void Operate(void);
		void OperateJoyStick(void);
	public:
		CCamera();
		~CCamera();
		virtual void Init( void );
		virtual void Uninit( void );
		virtual void Update( void );
		void Draw( void );
		virtual void Set( void );

		static CCamera *Create( void );

		Vector3 GetPosition( void );
		D3DXMATRIX *GetMtxProj( void );
		D3DXMATRIX *GetMtxView( void );
		D3DXVECTOR3 GetVecRV( void );

		void SetShake(float amplitudeint, int time);
		void SetCameraMode(int id);
		void UpdateMode(void);

		Vector3 m_Rot;
};

#endif