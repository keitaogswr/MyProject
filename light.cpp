/*******************************************************************************
* タイトル名：
* ファイル名：light.cpp
* 作成者	：AT13B284 10 小笠原啓太
* 作成日	：
********************************************************************************
* 更新履歴	：
*
*******************************************************************************/
/*******************************************************************************
* インクルードファイル
*******************************************************************************/
#include "main.h"
#include "manager.h"
#include "renderer.h"
#include "scene.h"
#include "light.h"

/*******************************************************************************
* マクロ定義
*******************************************************************************/

/*******************************************************************************
* グローバル変数
*******************************************************************************/

/*******************************************************************************
* 関数名：CLight::CLight()
* 
* 引数	：
* 戻り値：
* 説明	：コンストラクタ
*******************************************************************************/
CLight::CLight()
{
}

/*******************************************************************************
* 関数名：CLight::~CLight()
* 
* 引数	：
* 戻り値：
* 説明	：デストラクタ
*******************************************************************************/
CLight::~CLight()
{
}

/*******************************************************************************
* 関数名：void CLight::Init( void )
* 
* 引数	：
* 戻り値：
* 説明	：初期化処理
*******************************************************************************/
void CLight::Init( void )
{
	// デバイスの取得
	CRenderer *renderer = CManager::GetRenderer();
	LPDIRECT3DDEVICE9 pDevice = renderer->GetDevice();

	D3DXVECTOR3 vecDir;				// 作業用変数

	for( int i = 0; i < LIGHT_MAX; i++ )
	{
		ZeroMemory( &m_aLight[ i ], sizeof( D3DLIGHT9 ) );						// 中身を0で埋める
	}

	//// ライト0の設定
	//m_aLight[ 0 ].Type = D3DLIGHT_DIRECTIONAL;									// 平行光源
	//m_aLight[ 0 ].Diffuse = D3DXCOLOR( 1.0f, 1.0f, 1.0f, 1.0f );				// 拡散光
	//vecDir = D3DXVECTOR3( 0.0f, -1.0f, 0.0f );									// 光の方向
	//D3DXVec3Normalize( ( D3DXVECTOR3* )&m_aLight[ 0 ].Direction, &vecDir );		// 正規化
	//pDevice->SetLight( 0, &m_aLight[ 0 ] );									// ライトの設定
	//pDevice->LightEnable( 0, TRUE );											// ライトを有効にする

	// ライト0の設定
	m_aLight[ 0 ].Type = D3DLIGHT_DIRECTIONAL;									// 平行光源
	m_aLight[ 0 ].Diffuse = D3DXCOLOR( 1.0f, 1.0f, 1.0f, 1.0f );				// 拡散光
	vecDir = D3DXVECTOR3( 0.3f, -1.0f, -0.5f );									// 光の方向
	D3DXVec3Normalize( ( D3DXVECTOR3* )&m_aLight[ 0 ].Direction, &vecDir );		// 正規化
	pDevice->SetLight( 0, &m_aLight[ 0 ] );										// ライトの設定
	pDevice->LightEnable( 0, TRUE );											// ライトを有効にする

	// ライト1の設定
	m_aLight[ 1 ].Type = D3DLIGHT_DIRECTIONAL;									// 平行光源
	m_aLight[ 1 ].Diffuse = D3DXCOLOR( 0.7f, 0.7f, 0.7f, 1.0f );				// 拡散光
	vecDir = D3DXVECTOR3( -0.4f, 1.0f, 0.7f );									// 光の方向
	D3DXVec3Normalize( ( D3DXVECTOR3* )&m_aLight[ 1 ].Direction, &vecDir );		// 正規化
	pDevice->SetLight( 1, &m_aLight[ 1 ] );										// ライトの設定
	pDevice->LightEnable( 1, TRUE );											// ライトを有効にする

	// ライト2の設定
	m_aLight[ 2 ].Type = D3DLIGHT_DIRECTIONAL;									// 平行光源
	m_aLight[ 2 ].Diffuse = D3DXCOLOR( 0.3f, 0.3f, 0.3f, 1.0f );				// 拡散光
	vecDir = D3DXVECTOR3( 0.1f, -0.2f, -1.0f );									// 光の方向
	D3DXVec3Normalize( ( D3DXVECTOR3* )&m_aLight[ 2 ].Direction, &vecDir );		// 正規化
	pDevice->SetLight( 2, &m_aLight[ 2 ] );										// ライトの設定
	pDevice->LightEnable( 2, TRUE );											// ライトを有効にする

}

/*******************************************************************************
* 関数名：void CLight::Uninit( void )
* 
* 引数	：
* 戻り値：
* 説明	：終了処理
*******************************************************************************/
void CLight::Uninit( void )
{

}

/*******************************************************************************
* 関数名：void CLight::Update( void )
* 
* 引数	：
* 戻り値：
* 説明	：更新処理
*******************************************************************************/
void CLight::Update( void )
{

}

/*******************************************************************************
* 関数名：void CLight::Update( void )
* 
* 引数	：
* 戻り値：
* 説明	：更新処理
*******************************************************************************/
void CLight::Draw( void )
{

}

/*******************************************************************************
* 関数名：CLight *CLight::Create( void )
* 
* 引数	：
* 戻り値：
* 説明	：生成処理
*******************************************************************************/
CLight *CLight::Create( void )
{
	CLight *light;
	light = new CLight;
	light->Init();
	return light;
}