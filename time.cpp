/*******************************************************************************
* タイトル名：
* ファイル名：time.cpp
* 作成者	：AT13B284 10 小笠原啓太
* 作成日	：
********************************************************************************
* 更新履歴	：
*
*******************************************************************************/
/*******************************************************************************
* インクルードファイル
*******************************************************************************/
#include "main.h"
#include "manager.h"
#include "renderer.h"
#include "scene.h"
#include "scene2D.h"
#include "number.h"
#include "time.h"

/*******************************************************************************
* マクロ定義
*******************************************************************************/
#define WIDTH			( 25 )
#define HEIGHT			( 50 )
#define TEXTURE_ROW		( 10 )
#define TEXTURE_COLUMN	( 1 )
#define DEF_TIME		( 999 )

/*******************************************************************************
* グローバル変数
*******************************************************************************/
int CTime::m_nTime;

/*******************************************************************************
* 関数名：CTime::CTime()
* 
* 引数	：
* 戻り値：
* 説明	：コンストラクタ
*******************************************************************************/
CTime::CTime( DRAWORDER DrawOrder ):CScene( DrawOrder )
{
	m_nTime = 0;
	m_nTimeCnt = 0;
}

/*******************************************************************************
* 関数名：CTime::~CTime()
* 
* 引数	：
* 戻り値：
* 説明	：デストラクタ
*******************************************************************************/
CTime::~CTime()
{
}

/*******************************************************************************
* 関数名：void CTime::Init( Vector3 pos )
* 
* 引数	：
* 戻り値：
* 説明	：初期化処理
*******************************************************************************/
void CTime::Init( Vector3 pos )
{
	m_Pos = pos;
	m_nTime = DEF_TIME;

	for( int i = 0; i < TIMER_MAX; i++ )
	{
		m_Number[ i ] = CNumber::Create( Vector3( m_Pos.x + WIDTH * TIMER_MAX / 2 - WIDTH * i, m_Pos.y, m_Pos.z ) );
	}
}

/*******************************************************************************
* 関数名：void CTime::Uninit( void )
* 
* 引数	：
* 戻り値：
* 説明	：終了処理
*******************************************************************************/
void CTime::Uninit( void )
{
	for( int i = 0; i < TIMER_MAX; i++ )
	{
		m_Number[ i ]->Uninit();
		SAFE_DELETE( m_Number[ i ] );
	}
}

/*******************************************************************************
* 関数名：void CTime::Update( void )
* 
* 引数	：
* 戻り値：
* 説明	：更新処理
*******************************************************************************/
void CTime::Update( void )
{
	// カウンター加算
	m_nTimeCnt++;
	if( m_nTimeCnt == 60 )
	{// タイマーの更新
		m_nTime--;
		m_nTimeCnt = 0;
	}

	if( m_nTime < 0 )
	{// 初期化
		m_nTime = 0;
	}

	// タイマーの各桁の数字の保存
	for( int i = 0, div = 1; i < TIMER_MAX; i++, div *= 10 )
	{
		m_Number[ i ]->SetNum( m_nTime / div % 10 );
	}
	// ナンバーの更新
	for( int i = 0; i < TIMER_MAX; i++ )
	{
		m_Number[ i ]->Update();
	}
}

/*******************************************************************************
* 関数名：void CTime::Draw( void )
* 
* 引数	：
* 戻り値：
* 説明	：描画処理
*******************************************************************************/
void CTime::Draw( void )
{
	for( int i = 0; i < TIMER_MAX; i++ )
	{
		m_Number[ i ]->Draw();
	}
}

/*******************************************************************************
* 関数名：CTime *CTime::Create( Vector3 pos )
* 
* 引数	：
* 戻り値：
* 説明	：生成処理
*******************************************************************************/
CTime *CTime::Create( Vector3 pos )
{
	CTime *time;
	time = new CTime;
	time->Init( pos );
	return time;
}